from loader import bot
from telebot.types import Message
from API.site_api import format_movie_info
from states.movies_information import SearchMovie
from keyboards.reply.buttons import get_main_menu_keyboard
from database.model import History, User
from datetime import datetime
from typing import List


@bot.message_handler(commands=["history"])
@bot.message_handler(func=lambda message: message.text == "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞")
def command_history(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history –∏ —Å–æ–æ–±—â–µ–Ω–∏—è "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞".
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞—Ç—É –ø–æ–∏—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD.
    :param message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    bot.send_message(
        message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–∏—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD."
    )
    bot.set_state(
        message.from_user.id, SearchMovie.waiting_for_date_input, message.chat.id
    )


@bot.message_handler(
    state=SearchMovie.waiting_for_date_input, regexp=r"^\d{4}-\d{2}-\d{2}$"
)
def get_date(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã.
    :param message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    wait_message = bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    date = parse_date(message.text, message.from_user.id)
    if not date:
        bot.delete_message(message.chat.id, wait_message.message_id)
        return
    bot.delete_message(message.chat.id, wait_message.message_id)

    user, created = User.get_or_create(user_id=message.from_user.id)
    histories = fetch_user_histories(user, date)

    if not histories:
        bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.")
        return

    history_text = format_history(histories)

    if len(history_text) > 4096:
        send_long_message(message.from_user.id, history_text)
    else:
        bot.send_message(
            message.from_user.id, history_text, reply_markup=get_main_menu_keyboard()
        )

    bot.delete_state(message.from_user.id, message.chat.id)


def parse_date(date_str: str, user_id: int) -> datetime:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ö–æ–¥—è—â—É—é –¥–∞—Ç—É.
    :param date_str: –°—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: –û–±—ä–µ–∫—Ç datetime.
    """
    try:
        date = datetime.strptime(date_str, "%Y-%m-%d")
        if date > datetime.now():
            bot.send_message(user_id, "–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")
            return None
        return date
    except ValueError:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD.")
        return None


def fetch_user_histories(user: User, date: datetime) -> List[History]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É.
    :param user: –û–±—ä–µ–∫—Ç User.
    :param date: –û–±—ä–µ–∫—Ç datetime.
    :return: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ History.
    """
    start_time = datetime.combine(date, datetime.min.time())
    end_time = datetime.combine(date, datetime.max.time())

    return History.select().where(
        History.user == user,
        (History.timestamp >= start_time) & (History.timestamp <= end_time),
    )


def format_history(histories: List[History]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞.
    :param histories: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ History.
    :return: –°—Ç—Ä–æ–∫–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π –ø–æ–∏—Å–∫–∞.
    """
    history_text = "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞:\n\n"

    for history in histories:
        movie_info = {
            "timestamp": history.timestamp,
            "user_id": history.user,
            "type": history.search_type,
            "name": history.movie_name,
            "description": history.description,
            "rating": {"kp": history.rating},
            "year": history.year,
            "genres": [{"name": genre.strip()} for genre in history.genre.split(",")],
            "ageRating": history.age_rating,
            "poster": {"url": history.poster_url},
        }

        history_info = format_movie_info(movie_info)
        _, history_text_part = history_info
        history_text_part += (
            f"\nüìÖ–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {history.timestamp.strftime('%Y-%m-%d %H:%M')}\n"
            f"üÜîID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {history.user}\n"
            f"üîç–¢–∏–ø –ø–æ–∏—Å–∫–∞: {history.search_type}\n"
        )
        history_text += (
            history_text_part + "\n_______________________________________\n"
        )
    return history_text


def send_long_message(user_id: int, history_text: str):
    """–†–∞–∑–¥–µ–ª—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Å—Ç—è–º–∏."""
    parts = [history_text[i : i + 4096] for i in range(0, len(history_text), 4096)]
    for part in parts:
        bot.send_message(user_id, part, reply_markup=get_main_menu_keyboard())