import logging
from loader import bot
from config_data.config import settings
from database.model import User, History
from datetime import datetime
from typing import List, Dict, Any, Optional
import requests


logging.basicConfig(level=logging.INFO)


base_params: Dict[str, Any] = {
    "token": settings.API_KEY.get_secret_value(),
    "selectFields": [
        "name",
        "description",
        "year",
        "genres",
        "rating",
        "ageRating",
        "budget",
        "poster",
    ],
    "notNullFields": [
        "name",
        "year",
        "description",
        "rating.kp",
        "genres.name",
        "ageRating",
        "budget.value",
        "poster.url",
    ],
}


def search_by_budget(
    user_id: int, count: int, sort_type: int, page: int = 1
) -> Optional[List[Dict]]:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –±—é–¥–∂–µ—Ç—É.
    :param user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫.
    :param count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å.
    :param sort_type: –¢–∏–ø —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.
    :param page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.
    :return Optional[Any[Dict]]: –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤, –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ –±—é–¥–∂–µ—Ç—É.
    """
    params = {
        **base_params,
        "sortField": "budget.value",
        "budget.value": "10000-10e20",
        "rating.kp": "1-10",
        "sortType": sort_type,
        "limit": count,
        "page": page,
    }
    movies = make_request(settings.API_URL, params, user_id)
    return movies


def search_by_name(
    user_id: int, name: str, count: int = 10, page: int = 1
) -> Optional[List[Dict]]:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
    :param user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫.
    :param name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞.
    :param count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10.
    :param page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.
    :return Optional[Any[Dict]]: –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤, –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
    """
    params = {
        **base_params,
        "query": name,
        "limit": count,
        "page": page,
    }
    movies = make_request(settings.API_URL + "/search", params, user_id)
    filtered_movies = [
        movie for movie in movies if name.lower() in movie["name"].lower()
    ]
    return filtered_movies[:count]


def search_by_rating(
    user_id: int, count: int, sort_type: int, rating: str, page: int = 1
) -> Optional[List[Dict]]:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É.
    :param user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫.
    :param count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å.
    :param sort_type: –¢–∏–ø —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.
    :param rating: –î–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–π—Ç–∏–Ω–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞.
    :param page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.
    :return Optional[Any[Dict]]: –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤, –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É.
    """
    params = {
        **base_params,
        "rating.kp": rating,
        "sortField": "rating.kp",
        "sortType": sort_type,
        "limit": count,
        "page": page,
    }
    movies = make_request(settings.API_URL, params, user_id)
    return movies


def save_history(user_id: int, movies: List, search_type: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –≤ –ë–î.
    :param user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω–∏–ª –ø–æ–∏—Å–∫.
    :param movies: –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã.
    :param search_type: –¢–∏–ø –ø–æ–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    :return None
    """
    user, _ = User.get_or_create(user_id=user_id)

    for movie in movies:
        if not movie.get("name") or movie is None:
            continue

        poster_url = movie.get("poster")
        if poster_url is not None:
            poster_url = poster_url.get("url", "–ù–µ—Ç –ø–æ—Å—Ç–µ—Ä–∞")

        History.create(
            user=user,
            movie_name=movie.get("name"),
            description=movie.get("description"),
            rating=movie.get("rating", {}).get("kp"),
            year=movie.get("year"),
            genre=", ".join(genre["name"] for genre in movie.get("genres", [])),
            age_rating=movie.get("ageRating", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"),
            poster_url=poster_url,
            timestamp=datetime.now(),
            search_type=search_type,
        )


def format_movie_info(movie: Dict) -> tuple:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    :param movie: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª—å–º–µ.
    # :param show_history: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞.
    :return tuple: –ö–æ—Ä—Ç–µ–∂, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π URL –ø–æ—Å—Ç–µ—Ä–∞ —Ñ–∏–ª—å–º–∞ –∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ.
    """
    genres = movie.get("genres", [])
    budget = movie.get("budget", {}).get("value", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    currency = movie.get("budget", {}).get("currency", "")
    poster_url = movie.get("poster").get("url", "–ù–µ—Ç –ø–æ—Å—Ç–µ—Ä–∞")

    caption_parts = [
        f"üìΩ–ù–∞–∑–≤–∞–Ω–∏–µ: {movie['name']}\n"
        f"üéØ–ñ–∞–Ω—Ä: {', '.join(genre['name'] for genre in genres) or '–ù–µ—Ç –∂–∞–Ω—Ä–∞'}\n"
        f"üíØ–†–µ–π—Ç–∏–Ω–≥: {movie.get('rating', {}).get('kp')}\n"
        f"üóìÔ∏è–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {movie.get('year')}\n"
        f"üîû–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥: {'–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞' if movie.get('ageRating') is None else f'{movie.get('ageRating')}+'}\n"
        f"üí∞–ë—é–¥–∂–µ—Ç: {budget} {currency}\n"
        f"üé¨–û–ø–∏—Å–∞–Ω–∏–µ: {'–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è' if not movie.get('description') else movie.get('description')}\n"
    ]

    caption = "\n".join(caption_parts)
    return poster_url, caption[:1024] if len(caption) > 1024 else caption


def send_movies_info(chat_id: int, movies: Dict[str, Any]) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏.
    :param chat_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–∞—Ö.
    :param movies: –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.
    :return None
    """
    valid_movies = []
    for movie in movies:
        if not movie.get("name"):
            logging.info(f"–§–∏–ª—å–º {movie.get('id')} –Ω–µ –∏–º–µ–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è.")
        else:
            valid_movies.append(movie)

    for movie in valid_movies:
        poster_url, caption = format_movie_info(movie)

        if poster_url:
            bot.send_photo(chat_id, poster_url, caption)
        else:
            bot.send_message(chat_id, caption + "üñº–ü–æ—Å—Ç–µ—Ä: –ù–µ—Ç –ø–æ—Å—Ç–µ—Ä–∞\n\n")


def make_request(
    url: str, params: Dict[str, Any], user_id: int
) -> List[Dict[str, Any]]:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É URL —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ JSON.
    :param url: URL, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.
    :param params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –∑–∞–ø—Ä–æ—Å–µ.
    :param user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å.
    :return List[Dict[str, Any]]: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω—ã–º, None –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º
    —Å–ª—É—á–∞–µ.
    """
    response = requests.get(url, params=params)

    try:
        response.raise_for_status()
        return response.json().get("docs", [])
    except (requests.HTTPError, requests.RequestException) as err:
        logging.error(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ '{url}' —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ '{params}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {err}."
        )
        return []